FROM ubuntu:18.04

RUN apt-get update -qq && apt-get install -qqy --no-install-recommends \
    git wget bzip2 file unzip libtool pkg-config cmake build-essential \
    automake yasm gettext autopoint vim python ninja-build subversion \
    ca-certificates && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*


RUN git config --global user.name "LLVM MinGW" && \
    git config --global user.email root@localhost

WORKDIR /build

ENV TOOLCHAIN_PREFIX=/opt/llvm-mingw

ARG FULL_LLVM

# Build LLVM
COPY build-llvm.sh ./
RUN ./build-llvm.sh $TOOLCHAIN_PREFIX --enable-asserts

# Strip the LLVM install output immediately. (This doesn't reduce the
# total docker image size as long as it is in a separate RUN layer though,
# but reduces build times if tweaking the contents of strip-llvm.sh.)
# Most of the size of the docker image comes from the build directory that
# we keep in any case.
COPY strip-llvm.sh ./
RUN ./strip-llvm.sh $TOOLCHAIN_PREFIX

ARG TOOLCHAIN_ARCHS="i686 x86_64 armv7 aarch64"

# Install the usual $TUPLE-clang binaries
COPY wrappers/*.sh wrappers/*.c wrappers/*.h ./wrappers/
COPY install-wrappers.sh ./
RUN ./install-wrappers.sh $TOOLCHAIN_PREFIX

ARG DEFAULT_CRT=ucrt

# Build MinGW-w64
COPY build-mingw-w64.sh ./
RUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX --with-default-msvcrt=$DEFAULT_CRT

COPY build-mingw-w64-tools.sh ./
RUN ./build-mingw-w64-tools.sh $TOOLCHAIN_PREFIX

# Build compiler-rt
COPY build-compiler-rt.sh ./
RUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX

# Build mingw-w64's extra libraries
COPY build-mingw-w64-libraries.sh ./
RUN ./build-mingw-w64-libraries.sh $TOOLCHAIN_PREFIX

# Build C test applications
ENV PATH=$TOOLCHAIN_PREFIX/bin:$PATH

COPY test/*.c test/*.h test/*.idl ./test/
RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        mkdir -p $arch && \
        for test in hello hello-tls crt-test setjmp; do \
            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe || exit 1; \
        done; \
        for test in autoimport-lib; do \
            $arch-w64-mingw32-clang $test.c -shared -o $arch/$test.dll -Wl,--out-implib,$arch/lib$test.dll.a || exit 1; \
        done; \
        for test in autoimport-main; do \
            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -L$arch -l${test%-main}-lib || exit 1; \
        done; \
        for test in idltest; do \
            # The IDL output isn't arch specific, but test each arch frontend \
            $arch-w64-mingw32-widl $test.idl -h -o $arch/$test.h && \
            $arch-w64-mingw32-clang $test.c -I$arch -o $arch/$test.exe -lole32 || exit 1; \
        done; \
    done

# Build libunwind/libcxxabi/libcxx
COPY build-libcxx.sh ./
RUN ./build-libcxx.sh $TOOLCHAIN_PREFIX

# Build C++ test applications
COPY test/*.cpp ./test/
RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        mkdir -p $arch && \
        for test in hello-cpp hello-exception tlstest-main exception-locale exception-reduced global-terminate; do \
            $arch-w64-mingw32-clang++ $test.cpp -o $arch/$test.exe || exit 1; \
        done; \
        for test in tlstest-lib; do \
            $arch-w64-mingw32-clang++ $test.cpp -shared -o $arch/$test.dll || exit 1; \
        done; \
    done

# Build sanitizers. Ubsan includes <typeinfo> from the C++ headers, so
# we need to build this after libcxx.
RUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX --build-sanitizers

# Sanitizers on windows only support x86.
RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        case $arch in \
        i686|x86_64) \
            ;; \
        *) \
            continue \
            ;; \
        esac && \
        for test in stacksmash; do \
            $arch-w64-mingw32-clang $test.c -o $arch/$test-asan.exe -fsanitize=address -g -gcodeview -Wl,-pdb,$arch/$test-asan.pdb || exit 1; \
        done; \
        for test in ubsan; do \
            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fsanitize=undefined || exit 1; \
        done; \
    done

# Build libssp
COPY build-libssp.sh libssp-Makefile ./
RUN ./build-libssp.sh $TOOLCHAIN_PREFIX

RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        mkdir -p $arch && \
        for test in stacksmash; do \
            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fstack-protector-strong || exit 1; \
        done; \
    done

RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        cp $TOOLCHAIN_PREFIX/$arch-w64-mingw32/bin/*.dll $arch || exit 1; \
    done

RUN dpkg --add-architecture i386 && apt-get update && apt-get install --no-install-recommends -y lua5.2 libtool automake autoconf autopoint make gettext pkg-config qt4-dev-tools qt5-default git subversion cmake cvs wine64-development-tools zip p7zip nsis bzip2 yasm ragel ant default-jdk protobuf-compiler dos2unix vim gperf python3 wine-development wine32-development wine64-development flex help2man

RUN git clone git://git.videolan.org/vlc.git && \
    cd vlc && \
    git checkout 775ce215d8d093afd8c10da7aaae01b144fb5164


WORKDIR /build/vlc

RUN cd extras/tools && ./bootstrap && make -j$(nproc)
ENV PATH=/build/vlc/extras/tools/build/bin:$PATH

ARG VLC_ARCH=x86_64

RUN mkdir -p contrib/win32 && \
    cd contrib/win32 && \
    ../bootstrap --host=$VLC_ARCH-w64-mingw32 && \
    make -j$(nproc) fetch
RUN cd contrib/win32 && \
    make -j$(nproc)
RUN ./bootstrap
ENV PKG_CONFIG_LIBDIR=/build/vlc/contrib/$VLC_ARCH-w64-mingw32/lib/pkgconfig
RUN mkdir win32 && \
    cd win32 && \
    ../extras/package/win32/configure.sh --host=$VLC_ARCH-w64-mingw32 && \
    make -j$(nproc)
RUN cd win32 && \
    make package-win32-zip WINE_SDK_PATH=/usr/include/wine-development/wine/windows -j$(nproc) && \
    mv vlc*.zip vlc-$VLC_ARCH.zip
